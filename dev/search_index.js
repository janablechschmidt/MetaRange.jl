var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/#Index","page":"Functions","title":"Index","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"functions/#Function-Descriptions","page":"Functions","title":"Function Descriptions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [MetaRange]","category":"page"},{"location":"functions/#MetaRange.Chunk","page":"Functions","title":"MetaRange.Chunk","text":"Chunk\n\nStruct for saving chunk coordinates\n\nFields\n\n-x::Int -y::Int\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Env_Preferences","page":"Functions","title":"MetaRange.Env_Preferences","text":"Env_Preferences\n\nStruct for saving the environmental preferences of a species.\n\nFields\n\nupper_limit::Float64: species parameter\nlower_limit::Float64: species parameter\noptimum::Float64: species parameter\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Simulation_Data","page":"Functions","title":"MetaRange.Simulation_Data","text":"Simulation_Data\n\nStruct for saving all data related to the simulation\n\nFields\n\nparameters::Simulation_Parameters: simulation parameters of the experiment\nlandscape::Landscape: landscape of the experiment\nspecies::Vector{Species}: a vector of all the species in the experiment\nduration::Duration: saves the duration the experiment took to compute\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Simulation_Variables","page":"Functions","title":"MetaRange.Simulation_Variables","text":"Simulation_Variables\n\nSimulation variables used for a species during Run_Simulation!\"\n\nFields\n\n-habitat::Array{Float64, 2}: habitability of landscape cells for a species at current simulation timestep -is_habitat::BitArray{2}: if landscape cells are habitable for a species at current simulation timestep -future_habitat::Array{Float64}: TODO -future_is_habitat::BitArray{2}: if landscape cells are habitable for a species at next simulation timestep -biomass::Array{Float64, 2}: biomass of a species individual at landscape cells -growrate::Array{Float64, 2}: growrate of species at landscape cells -carry::Array{Float64, 2}: carry property of species at landscape cells -allee::Array{Float64, 2}: allee property of species at landscape cells -bevmort::Array{Float64, 2}: Beverton mortaility of species at landscape cells -occurrences::Vector{CartesianIndex{2}}: list of cells where species occurs at current timestep -offspring::Array{Float64, 2}: offspring of species at current timestep\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Species","page":"Functions","title":"MetaRange.Species","text":"Species\n\nSaving all data related to a species.\n\nFields\n\n-species_name::String: name of the species -traits::Traits: a (Traits)[@ref] struct for the species -abundances::Array{Union{Int64, Missing}, 3}: amount of individuals of this species in each timestep -habitat::Array{Float64, 3}: habitat suitability in each timestep -dispersal_kernel::Matrix{Float64}:#TODO -vars::Simulation_Variables:#TODO\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Traits","page":"Functions","title":"MetaRange.Traits","text":"Traits\n\nTraits of a species.\n\n#TODO: Add description in fields\n\nFields\n\nmass::Float64:\nsd_mass::Float64:\ngrowrate::Float64:\nsd_growrate::Float64:\nparam_const_growrate::Union{Float64, Nothing}:\nmax_dispersal_dist::Int64:\nmax_dispersal_buffer::Int64:\nmean_dispersal_dist::Int64:\nallee::Float64: Allee effect counteracting negative diversity loss in small populations\nsd_allee::Float64: Allee effect standard deviation\nparam_const_allee::Union{Float64, Nothing}:\nbevmort::Float64:\nsd_bevmort::Float64:\nparam_const_bevmort::Union{Float64, Nothing}:\ncarry::Float64:\nsd_carry::Float64:\nparam_const_carry::Union{Float64, Nothing}:\nenv_preferences::Dict{String, Env_Preferences}:\nhabitat_cutoff_suitability::Float64:\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.BV-Tuple{Int64, Float64, Float64, Float64}","page":"Functions","title":"MetaRange.BV","text":"BV(N::Int64, growrate::Float64, carry::Float64, mortality::Float64)\n\nReturns the number of individuals in the next generation according to the Beverton-Holt model. Includes stochastic mortality.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.BVNoStoch-Tuple{Int64, Float64, Float64, Float64}","page":"Functions","title":"MetaRange.BVNoStoch","text":"BVNoStoch(N::Int64, growrate::Float64, carry::Float64, mortality::Float64)\n\nReturns the number of individuals in the next generation according to the Beverton-Holt model. Does not include stochastic mortality.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.DispersalNegExpFunction-Tuple{Any, Any}","page":"Functions","title":"MetaRange.DispersalNegExpFunction","text":"DispersalNegExpFunction(alpha, r)\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.DispersalNegExpKernel-Tuple{Any, Any}","page":"Functions","title":"MetaRange.DispersalNegExpKernel","text":"DispersalNegExpKernel(Dispersalbuffer, mean_dispersal_dist)\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.DispersalSurvivalRound-Tuple{Matrix{Union{Missing, Int64}}, Matrix{Float64}, Matrix{Int64}, Int64}","page":"Functions","title":"MetaRange.DispersalSurvivalRound","text":"DispersalSurvivalRound(\nAbundances::Array{Union{Missing, Int64},2},\nOffspring::Array{Float64,2}, xy::Array{Int64,2},\nmax_dispersal_dist::Int64\n)\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.DispersalSurvivalStoch-Tuple{Matrix{Union{Missing, Int64}}, Matrix{Float64}, Matrix{Int64}, Int64}","page":"Functions","title":"MetaRange.DispersalSurvivalStoch","text":"DispersalSurvivalStoch(\nAbundances::Array{Union{Missing, Int64},2},\nOffspring::Array{Float64,2},xy::Array{Int64,2},\nmax_dispersal_dist::Int64\n)\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.Disperse!-Tuple{Vector{MetaRange.Species}, MetaRange.Landscape, NTuple{4, Vector{MetaRange.Chunk}}, Int64}","page":"Functions","title":"MetaRange.Disperse!","text":"Disperse!(\nspecies::Vector{Species},\nLS::Landscape,\ngroups::NTuple{4, Vector{Chunk}},\ntimestep::Int64,\n\n)\n\nDispersal\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.GetDisjunctChunkGroups-Tuple{Int64, Tuple{Int64, Int64, Int64}}","page":"Functions","title":"MetaRange.GetDisjunctChunkGroups","text":"GetDisjunctChunkGroups(\nmax_dispersal_buffer::Int64,\nsize::Tuple{Int64, Int64, Int64},\n\n)\n\nCalculate the distinct chunk groups\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.GetDispersalSurvival-Tuple{Bool}","page":"Functions","title":"MetaRange.GetDispersalSurvival","text":"GetDispersalSurvival(use_stoch_Num::Bool)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.GetReproductionModel-Tuple{String}","page":"Functions","title":"MetaRange.GetReproductionModel","text":"GetReproductionModel(reproduction_model::String)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.HabitatMortality-Tuple{Matrix{Union{Missing, Int64}}, BitMatrix}","page":"Functions","title":"MetaRange.HabitatMortality","text":"HabitatMortality(Abundances, Is_habitat)\n\nHabitat based mortality\n\nThis function kills individuals that are in non suitable Habitat in code{Run}\n\nAbundances: array with the number of individuals in the landscape Is_habitat: array with boolean values that indicate which cell is habitat in the next timestep\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.InitializeAbundances-Tuple{MetaRange.Simulation_Parameters, Matrix{Float64}, Float64}","page":"Functions","title":"MetaRange.InitializeAbundances","text":"InitializeAbundances(\n    SP::Simulation_Parameters,\n    habitat::Array{Float64, 2},\n    carry::Float64)\n\nInitialization of Abundances.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.KernelDispersal!-Tuple{Int64, Matrix{Float64}, Matrix{Float64}}","page":"Functions","title":"MetaRange.KernelDispersal!","text":"KernelDispersal!(N::Int64, Offspring::Array{Float64,2}, Dispersal_kernel::Array{Float64,2})\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.MortalityBev-Tuple{Int64, Float64}","page":"Functions","title":"MetaRange.MortalityBev","text":"MortalityBev(N::Int64, mortality::Float64)\n\nReturns how many Individuals die. Includes Stochasticity\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.MortalityBevNoStoch-Tuple{Int64, Float64}","page":"Functions","title":"MetaRange.MortalityBevNoStoch","text":"MortalityBevNoStoch(N::Int64, mortality::Float64)\n\nReturns how many Individuals die. No Stochasticity\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.Randomize-NTuple{4, Any}","page":"Functions","title":"MetaRange.Randomize","text":"Randomize(y,x,value,sd)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.ReproductionBeverton-Tuple{Int64, Float64, Float64, Float64}","page":"Functions","title":"MetaRange.ReproductionBeverton","text":"ReproductionBeverton(N::Int64, growrate::Float64, carry::Float64, mortality::Float64)\n\nReturns the number of offspring in the next generation according to the Beverton-Holt model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.ReproductionRicker-Tuple{Int64, Float64, Float64, Union{Nothing, Float64}}","page":"Functions","title":"MetaRange.ReproductionRicker","text":"ReproductionRicker(N::Int64, growrate::Float64, carry::Float64, unused::Union{Float64,Nothing})\n\nReturns the number of Individuals in the next generation according to the Ricker model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.ReproductionRickerAllee-Tuple{Int64, Float64, Float64, Union{Nothing, Float64}}","page":"Functions","title":"MetaRange.ReproductionRickerAllee","text":"ReproductionRickerAllee(N::Int64, growrate::Float64, carry::Float64, allee::Union{Float64,Nothing})\n\nReturns the number of Individuals in the next generation according to the Ricker model. Includes allee effects\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.Run_Simulation!-Tuple{Simulation_Data}","page":"Functions","title":"MetaRange.Run_Simulation!","text":"Run_Simulation!(SD::Simulation_Data)\n\nEcological Simulation\n\nMain simulation function. Load, initialize and execute all data & processes that are needed.\n\nArguments\n\nSD::MetaRange.Simulation_Data: MetaRange simulation data struct. Most likely produced by   read_input()\n\nReturns\n\nSD::MetaRange.Simulation_Data: Returns the struct with later timesteps after   initialisation simulated.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.Survive!-Tuple{Vector{MetaRange.Species}, Any, Int64}","page":"Functions","title":"MetaRange.Survive!","text":"Survive!(species::Vector{Species}, DispersalSurvival, t::Int64)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.check_attribute_values!-Tuple{Array{Float64}, String}","page":"Functions","title":"MetaRange.check_attribute_values!","text":"check_attribute_values!(attribute::Array{Float64}, key::String)\n\nSanity checks for Attribute Matrices. Will convert Celsius values to Kelvin.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.check_environmentdir!-Tuple{Dict, String}","page":"Functions","title":"MetaRange.check_environmentdir!","text":"check_environmentdir!(config::Dict, config_path::String)\n\nCheck if environment directory was given and apply default path if not.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.check_for_nan-Tuple{Array{Float64}}","page":"Functions","title":"MetaRange.check_for_nan","text":"check_for_nan(attribute::Array{Float64})\n\nChecks for NaNs in parameter matrix\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.check_speciesdir!-Tuple{Dict, String}","page":"Functions","title":"MetaRange.check_speciesdir!","text":"check_speciesdir!(config::Dict, config_path::String)\n\nCheck if species directory was given and apply default path if not\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.default_run_data-Tuple{}","page":"Functions","title":"MetaRange.default_run_data","text":"default_run_data()\n\nInitializes a simple default run Simulation_Data struct.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.disperse_chunk!-Tuple{MetaRange.Species, Vector{CartesianIndex{2}}, Matrix{Float64}, MetaRange.Chunk, Int64}","page":"Functions","title":"MetaRange.disperse_chunk!","text":"disperse_chunk!(\nspecies::Species,\noccurrences::Vector{CartesianIndex{2}},\noffspring::Matrix{Float64},\nchunk::Chunk,\nt::Int64,\n\n)\n\nParallel Dispersal in a given chunk\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_Env_Preferences-Tuple{Dict, String}","page":"Functions","title":"MetaRange.get_Env_Preferences","text":"get_Env_Preferences(species::Dict, key::String)\n\nReturns the environmental preference for the supplied trait in \"key\" with limits and optimum as an Env_Preferences object.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_Simulation_Parameters-Tuple{Dict}","page":"Functions","title":"MetaRange.get_Simulation_Parameters","text":"get_Simulation_Parameters(config::Dict)\n\nReturns a Simulation_Parameters object constructed from the configuration Dictionary.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_Simulation_Variables-Tuple{}","page":"Functions","title":"MetaRange.get_Simulation_Variables","text":"get_Simulation_Variables()\n\nInitializes an empty Simulation_Variables object. Each parameter is defined with an empty matrix eqivalent to the landscape's size.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_Traits-Tuple{Dict}","page":"Functions","title":"MetaRange.get_Traits","text":"get_Traits(species::Dict)\n\nExtracts species traits from the configuration dictionary and returns a Trait object.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_biomass-NTuple{4, Any}","page":"Functions","title":"MetaRange.get_biomass","text":"get_biomass(mass, sd_mass, ysize, xsize)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_default_LS-Tuple{}","page":"Functions","title":"MetaRange.get_default_LS","text":"get_default_LS()\n\nCreates a Default Landscape with random values and some NAs for testing.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_default_simulation_parameters-Tuple{}","page":"Functions","title":"MetaRange.get_default_simulation_parameters","text":"get_default_simulation_parameters()\n\nReturns a Dictionary with default simulation parameters.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_default_species-Tuple{MetaRange.Landscape, MetaRange.Simulation_Parameters}","page":"Functions","title":"MetaRange.get_default_species","text":"get_default_species(LS::Landscape, SP::Simulation_Parameters)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_habitat-Tuple{Dict{String, MetaRange.Env_Preferences}, MetaRange.Landscape, String, Int64}","page":"Functions","title":"MetaRange.get_habitat","text":"get_habitat(\nenv_pref::Dict{String, Env_Preferences},\nLS::Landscape,\nattribute_mode::String,\nt::Int\n\n)\n\nGet habitat in current timestep. Return Array{Float64, 2}\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_is_habitat-Tuple{Any, Any}","page":"Functions","title":"MetaRange.get_is_habitat","text":"get_is_habitat(habitat, habitat_cutoff_suitability)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_pop_bevmort-Tuple{MetaRange.Traits, MetaRange.Landscape, Matrix{Float64}, Union{Float64, Matrix{Float64}}, Bool, Int64, Float64}","page":"Functions","title":"MetaRange.get_pop_bevmort","text":"get_pop_bevmort(\ntraits::Traits,\nLS::Landscape,\nhabitat::Array{Float64,2},\nmass::Union{Float64,Array{Float64,2}},\nuse_metabolic_theory::Bool,\ntimestep::Int,\nE::Float64,\n\n)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_pop_carry-Tuple{MetaRange.Traits, MetaRange.Landscape, Matrix{Float64}, Matrix{Float64}, Bool, Int64, Float64}","page":"Functions","title":"MetaRange.get_pop_carry","text":"get_pop_carry(\ntraits::Traits,\nLS::Landscape,\nhabitat::Array{Float64,2},\nmass::Array{Float64,2},\nuse_metabolic_theory::Bool,\ntimestep::Int,\nE::Float64,\n\n)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_pop_var-Tuple{Float64, Float64, Float64, Union{Nothing, Float64}, MetaRange.Traits, MetaRange.Landscape, Matrix{Float64}, Bool, Int64, Float64}","page":"Functions","title":"MetaRange.get_pop_var","text":"get_pop_var(\ntrait::Float64,\nsd_trait::Float64,\nexp_trait::Float64,\nparam_const_trait::Union{Float64,Nothing},\ntraits::Traits,\nLS::Landscape,\nmass::Array{Float64,2},\nuse_metabolic_theory::Bool,\ntimestep::Int, E::Float64,\n\n)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_testrun_simulation_parameters-Tuple{}","page":"Functions","title":"MetaRange.get_testrun_simulation_parameters","text":"get_testrun_simulation_parameters()\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.init_species_sim_vars!-Tuple{Array{MetaRange.Species}, MetaRange.Landscape, MetaRange.Simulation_Parameters, Int64}","page":"Functions","title":"MetaRange.init_species_sim_vars!","text":"init_species_sim_vars!(\nspecies::Array{Species},\nLS::Landscape,\nparameters::Simulation_Parameters,\ntimestep::Int,\n\n)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.parse_environment_parameters!-Tuple{Dict, Dict}","page":"Functions","title":"MetaRange.parse_environment_parameters!","text":"parse_environment_parameters!(config::Dict, input_config::Dict)\n\nBuild the Dicts containing environment attribute and restriction files.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.parse_species_datatypes!-Tuple{Dict}","page":"Functions","title":"MetaRange.parse_species_datatypes!","text":"parse_species_datatypes!(species::Dict)\n\nConvert all Float and Integer arguments to their respective Julia types (as needed for the species)\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.read_input-Tuple{String}","page":"Functions","title":"MetaRange.read_input","text":"read_input(path::String)\n\nReads in the .config and associated files in the folder and returns a Simulation_Data struct.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.read_species_dir-Tuple{String, MetaRange.Landscape, MetaRange.Simulation_Parameters}","page":"Functions","title":"MetaRange.read_species_dir","text":"read_species_dir(species_dir::String, LS::Landscape, SP::Simulation_Parameters)\n\nRead species directory, calculate properties and parameters if not provided and return as a vector of Species objects.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.read_ts_config-Tuple{String, String}","page":"Functions","title":"MetaRange.read_ts_config","text":"read_ts_config(env_dir::String, ls_timeseries_config::String)\n\nReturns the timeseries generator configuration as a Dict (no struct as it's only used once)\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.reproduce!-Tuple{Vector{MetaRange.Species}, Any, Int64}","page":"Functions","title":"MetaRange.reproduce!","text":"reproduce(species, reproduction, timestep)\n\nReproduction function. Takes a vector of species structs, a reproduction function and a timestep and calculates the amount of species in the next timestep.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.sp_sanity_checks!-Tuple{Dict}","page":"Functions","title":"MetaRange.sp_sanity_checks!","text":"sp_sanity_checks!(config::Dict)\n\nCheck if necessary configuration fields are missing\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.species_default-Tuple{}","page":"Functions","title":"MetaRange.species_default","text":"species_default()\n\nReturns a dictionary of default species traits for initialisation\n\n\n\n\n\n","category":"method"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/#Configuration","page":"Usage","title":"Configuration","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Configuration files for MetaRange are most commonly to be supplied together in a folder.  ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"configuration\n├── configuration.csv\n└── environment\n│   ├── Parameter_1.csv\n│   ├── Parameter_2.csv\n│   └── ...\n└── species\n    ├── Species_1.csv\n    ├── Species_2.csv\n    └── ...","category":"page"},{"location":"usage/#Configuration-File","page":"Usage","title":"Configuration File","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Configuration files are supplied as Space separated .csv files.  Files are formatted very strictly, no comments or trailing spaces are allowed. Empty lines are okay for formatting.  ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Argument Value\nSpecies ./species/\nTemperature ./environment/Parameter_1.csv\nPrecipitation ./environment/Parameter_2.csv\ninput_backup \n\n","category":"page"},{"location":"usage/#Environment-Files","page":"Usage","title":"Environment Files","text":"","category":"section"},{"location":"usage/#Species-Files","page":"Usage","title":"Species Files","text":"","category":"section"},{"location":"usage/#Running-the-simulation","page":"Usage","title":"Running the simulation","text":"","category":"section"},{"location":"usage/#Output","page":"Usage","title":"Output","text":"","category":"section"},{"location":"#MetaRange","page":"Home","title":"MetaRange","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MetaRange","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for MetaRange.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Exported-Functions","page":"Home","title":"Exported Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"read_input\nRun_Simulation!\nSimulation_Data\ndefault_run_data","category":"page"},{"location":"#MetaRange.read_input","page":"Home","title":"MetaRange.read_input","text":"read_input(path::String)\n\nReads in the .config and associated files in the folder and returns a Simulation_Data struct.\n\n\n\n\n\n","category":"function"},{"location":"#MetaRange.Run_Simulation!","page":"Home","title":"MetaRange.Run_Simulation!","text":"Run_Simulation!(SD::Simulation_Data)\n\nEcological Simulation\n\nMain simulation function. Load, initialize and execute all data & processes that are needed.\n\nArguments\n\nSD::MetaRange.Simulation_Data: MetaRange simulation data struct. Most likely produced by   read_input()\n\nReturns\n\nSD::MetaRange.Simulation_Data: Returns the struct with later timesteps after   initialisation simulated.\n\n\n\n\n\n","category":"function"},{"location":"#MetaRange.default_run_data","page":"Home","title":"MetaRange.default_run_data","text":"default_run_data()\n\nInitializes a simple default run Simulation_Data struct.\n\n\n\n\n\n","category":"function"}]
}
