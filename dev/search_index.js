var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/#Index","page":"Functions","title":"Index","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"functions/#Function-Descriptions","page":"Functions","title":"Function Descriptions","text":"","category":"section"},{"location":"functions/#Exported-Functions","page":"Functions","title":"Exported Functions","text":"","category":"section"},{"location":"functions/#Visualization-Functions","page":"Functions","title":"Visualization Functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"plot_abundances\nimage_abundances\nabundance_gif\nimage_suitability\nsuitability_gif\nimage_temperature\nimage_precipitation\nimage_restrictions","category":"page"},{"location":"functions/#MetaRange.plot_abundances","page":"Functions","title":"MetaRange.plot_abundances","text":"plot_abundances(SD::Simulation_Data)\n\nplots the total abundances of a species over time\n\n\n\n\n\n","category":"function"},{"location":"functions/#MetaRange.image_abundances","page":"Functions","title":"MetaRange.image_abundances","text":"image_abundances(SD::Simulation_Data, t::Int)\n\nplots the species abundance in the landscape for a given timestep t\n\n\n\n\n\n","category":"function"},{"location":"functions/#MetaRange.abundance_gif","page":"Functions","title":"MetaRange.abundance_gif","text":"abundance_gif(SD::Simulation_Data, frames=2)\n\ncreates a gif for the abundance of a species in a landscape for all timesteps\n\n\n\n\n\n","category":"function"},{"location":"functions/#MetaRange.image_suitability","page":"Functions","title":"MetaRange.image_suitability","text":"image_suitability(SD::Simulation_Data, t::Int)\n\nplots the habitat suitability of a landscape for a given timestep t\n\n\n\n\n\n","category":"function"},{"location":"functions/#MetaRange.suitability_gif","page":"Functions","title":"MetaRange.suitability_gif","text":"suitability_gif(SD::Simulation_Data, frames=2)\n\ncreates a gif for the habitat suitability of a landscape for all timesteps\n\n\n\n\n\n","category":"function"},{"location":"functions/#MetaRange.image_temperature","page":"Functions","title":"MetaRange.image_temperature","text":"image_temperature(SD::Simulation_Data, t::Int)\n\nplots the temperature of a landscape for a given timestep t\n\n\n\n\n\n","category":"function"},{"location":"functions/#MetaRange.image_precipitation","page":"Functions","title":"MetaRange.image_precipitation","text":"image_precipitation(SD::Simulation_Data, t::Int)\n\nplots the precipitation of a landscape for a given timestep t\n\n\n\n\n\n","category":"function"},{"location":"functions/#MetaRange.image_restrictions","page":"Functions","title":"MetaRange.image_restrictions","text":"image_restrictions(SD::Simulation_Data, t::Int)\n\nplots the restrictions of a landscape for a given timestep t\n\n\n\n\n\n","category":"function"},{"location":"functions/#Internal-Functions","page":"Functions","title":"Internal Functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [MetaRange]","category":"page"},{"location":"functions/#MetaRange.Chunk","page":"Functions","title":"MetaRange.Chunk","text":"Chunk\n\nStruct for saving chunk coordinates\n\nFields\n\nx::Int\ny::Int\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Duration","page":"Functions","title":"MetaRange.Duration","text":"Duration\n\nStruct for saving the length of the runtime for the entire simulation.\n\nFields\n\nstart_time::DateTime: time when simulation was started\nend_time::DateTime: time when simulation has finished\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Env_Preferences","page":"Functions","title":"MetaRange.Env_Preferences","text":"Env_Preferences\n\nStruct for saving the environmental preferences of a species.\n\nFields\n\nupper_limit::Float64: species parameter\nlower_limit::Float64: species parameter\noptimum::Float64: species parameter\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Landscape","page":"Functions","title":"MetaRange.Landscape","text":"Landscape\n\nStruct representing the landscape/environment.\n\nFields\n\nxlength::Int64: equivalent to size[2] of any Array in this struct\nylength::Int64: equivalent to size[1] of any Array in this struct\nenvironment::Dict{String, Array{Float64, 3}}: contains all environment attributes,\n\naddressable by name\n\nrestrictions::Array{Float64, 3}: #TODO\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Output","page":"Functions","title":"MetaRange.Output","text":"Output\n\nrepresents the output of a simulation run for a species.\n\nFields\n\nabundances: amount of individuals for each species in each timestep\nhabitat: habitat suitability for each species in each timestep\ncarry: carrying capacity for each species in each timestep\ngrowrate: growth rate for each species in each timestep\nbevmort: background mortality rate for each species in each timestep\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Simulation_Data","page":"Functions","title":"MetaRange.Simulation_Data","text":"Simulation_Data\n\nStruct for saving all data related to the simulation\n\nFields\n\nparameters::Simulation_Parameters: simulation parameters of the experiment\nlandscape::Landscape: landscape of the experiment\nspecies::Vector{Species}: a vector of all the species in the experiment\nduration::Duration: saves the duration the experiment took to compute\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Simulation_Parameters","page":"Functions","title":"MetaRange.Simulation_Parameters","text":"Simulation_Parameters\n\nStruct for saving simulation parameters.\n\nFields\n\nexperiment_name::String: name of the experiment\nconfig_dir::String: path to the folder containing the config_file\nconfig_file::String: path to the config_file\noutput_dir::String: path to the folder where the output should be saved\nspecies_dir::String: path to the folder containing the species definitions\nenvironment_dir::String: path to the folder or file containing the environment tables\ninput_backup::Bool: if true, the input files will be copied to the output folder\nenv_attribute_files::Dict{String, String}: #TODO\nenv_restriction_files::Dict{String, String}: #TODO\nenv_attribute_mode::String: #TODO\nenv_restriction_mode::String: #TODO\nattribute_restriction_blending::String: #TODO\ntimesteps::Int64: number of timesteps in the simulation\nrandomseed::Int64: seed for number generator used in the simulation\nreproduction_model::String: #TODO\nuse_metabolic_theory::Bool: #TODO\nuse_stoch_allee::Bool: if true the allee effect will be stochastic\nuse_stoch_carry::Bool: if true the carrying capacity will be stochastic\nuse_stoch_num::Bool: #TODO Stochastic Survival see R code\ninitialize_cells::String: #TODO\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Simulation_Variables","page":"Functions","title":"MetaRange.Simulation_Variables","text":"Simulation_Variables\n\nSimulation variables used for a species during run_simulation!\"\n\nFields\n\nhabitat::Array{Float64, 2}: habitability of landscape cells for a species at current\n\nsimulation timestep\n\nis_habitat::BitArray{2}: if landscape cells are habitable for a species at current\n\nsimulation timestep\n\nfuture_habitat::Array{Float64}: TODO\nfuture_is_habitat::BitArray{2}: if landscape cells are habitable for a species at next\n\nsimulation timestep\n\nbiomass::Array{Float64, 2}: biomass of a species individual at landscape cells\ngrowrate::Array{Float64, 2}: growrate of species at landscape cells\ncarry::Array{Float64, 2}: carry property of species at landscape cells\nallee::Array{Float64, 2}: allee property of species at landscape cells\nbevmort::Array{Float64, 2}: Beverton mortaility of species at landscape cells\noccurrences::Vector{CartesianIndex{2}}: list of cells where species occurs at current\n\ntimestep\n\noffspring::Array{Float64, 2}: offspring of species at current timestep\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Species","page":"Functions","title":"MetaRange.Species","text":"Species\n\nSaving all data related to a species.\n\nFields\n\nspecies_name::String: name of the species\ntraits::Traits: a (Traits)[@ref] struct for the species\nabundances::Array{Union{Int64, Missing}, 3}: amount of individuals of this species in\n\neach timestep\n\nhabitat::Array{Float64, 3}: habitat suitability in each timestep\ndispersal_kernel::Matrix{Float64}:#TODO\nvars::Simulation_Variables:#TODO\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Traits","page":"Functions","title":"MetaRange.Traits","text":"Traits\n\nTraits of a species.\n\n#TODO: Add description in fields\n\nFields\n\nmass::Float64:\nsd_mass::Float64:\ngrowrate::Float64:\nsd_growrate::Float64:\nparam_const_growrate::Union{Float64, Nothing}:\nmax_dispersal_dist::Int64:\nmax_dispersal_buffer::Int64:\nmean_dispersal_dist::Int64:\nallee::Float64: Allee effect counteracting negative diversity loss in small populations\nsd_allee::Float64: Allee effect standard deviation\nparam_const_allee::Union{Float64, Nothing}:\nbevmort::Float64:\nsd_bevmort::Float64:\nparam_const_bevmort::Union{Float64, Nothing}:\ncarry::Float64:\nsd_carry::Float64:\nparam_const_carry::Union{Float64, Nothing}:\nenv_preferences::Dict{String, Env_Preferences}:\nhabitat_cutoff_suitability::Float64:\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.BV-Tuple{Int64, Float64, Float64, Float64}","page":"Functions","title":"MetaRange.BV","text":"BV(N::Int64, growrate::Float64, carry::Float64, mortality::Float64)\n\nReturns the number of individuals in the next generation according to the Beverton-Holt model. Includes stochastic mortality.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.BVNoStoch-Tuple{Int64, Float64, Float64, Float64}","page":"Functions","title":"MetaRange.BVNoStoch","text":"BVNoStoch(N::Int64, growrate::Float64, carry::Float64, mortality::Float64)\n\nReturns the number of individuals in the next generation according to the Beverton-Holt model. Does not include stochastic mortality.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.DispersalNegExpFunction-Tuple{Any, Any}","page":"Functions","title":"MetaRange.DispersalNegExpFunction","text":"DispersalNegExpFunction(alpha, r)\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.DispersalNegExpKernel-Tuple{Any, Any}","page":"Functions","title":"MetaRange.DispersalNegExpKernel","text":"DispersalNegExpKernel(Dispersalbuffer, mean_dispersal_dist)\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.DispersalSurvivalRound-Tuple{Matrix{Union{Missing, Int64}}, Matrix{Float64}, Matrix{Int64}, Int64}","page":"Functions","title":"MetaRange.DispersalSurvivalRound","text":"DispersalSurvivalRound(\nAbundances::Array{Union{Missing, Int64},2},\nOffspring::Array{Float64,2}, xy::Array{Int64,2},\nmax_dispersal_dist::Int64\n)\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.DispersalSurvivalStoch-Tuple{Matrix{Union{Missing, Int64}}, Matrix{Float64}, Matrix{Int64}, Int64}","page":"Functions","title":"MetaRange.DispersalSurvivalStoch","text":"DispersalSurvivalStoch(\nAbundances::Array{Union{Missing, Int64},2},\nOffspring::Array{Float64,2},xy::Array{Int64,2},\nmax_dispersal_dist::Int64\n)\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.Disperse!-Tuple{Vector{MetaRange.Species}, MetaRange.Landscape, NTuple{4, Vector{MetaRange.Chunk}}, Int64}","page":"Functions","title":"MetaRange.Disperse!","text":"Disperse!(\nspecies::Vector{Species},\nLS::Landscape,\ngroups::NTuple{4, Vector{Chunk}},\ntimestep::Int64,\n\n)\n\nDispersal\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.GetDisjunctChunkGroups-Tuple{Int64, Tuple{Int64, Int64, Int64}}","page":"Functions","title":"MetaRange.GetDisjunctChunkGroups","text":"GetDisjunctChunkGroups(\nmax_dispersal_buffer::Int64,\nsize::Tuple{Int64, Int64, Int64},\n\n)\n\nCalculate the distinct chunk groups\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.GetDispersalSurvival-Tuple{Bool}","page":"Functions","title":"MetaRange.GetDispersalSurvival","text":"GetDispersalSurvival(use_stoch_Num::Bool)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.GetReproductionModel-Tuple{String}","page":"Functions","title":"MetaRange.GetReproductionModel","text":"GetReproductionModel(reproduction_model::String)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.HabitatMortality-Tuple{Matrix{Union{Missing, Int64}}, BitMatrix}","page":"Functions","title":"MetaRange.HabitatMortality","text":"HabitatMortality(Abundances::Matrix{Union{Missing,Int64}}, Is_habitat::BitArray{2})\n\nHabitat based mortality.\n\nThis function kills individuals that are in non suitable Habitat.\n\nAbundances: array with the number of individuals in the landscape\nIs_habitat: array with boolean values that indicate\n\nwhich cell is habitat in the next timestep\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.KernelDispersal!-Tuple{Int64, Matrix{Float64}, Matrix{Float64}}","page":"Functions","title":"MetaRange.KernelDispersal!","text":"KernelDispersal!(N::Int64, Offspring::Array{Float64,2}, Dispersal_kernel::Array{Float64,2})\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.MortalityBev-Tuple{Int64, Float64}","page":"Functions","title":"MetaRange.MortalityBev","text":"MortalityBev(N::Int64, mortality::Float64)\n\nReturns how many Individuals die. Includes Stochasticity\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.MortalityBevNoStoch-Tuple{Int64, Float64}","page":"Functions","title":"MetaRange.MortalityBevNoStoch","text":"MortalityBevNoStoch(N::Int64, mortality::Float64)\n\nReturns how many Individuals die. No Stochasticity\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.ReproductionBeverton-Tuple{Int64, Float64, Float64, Float64}","page":"Functions","title":"MetaRange.ReproductionBeverton","text":"ReproductionBeverton(N::Int64, growrate::Float64, carry::Float64, mortality::Float64)\n\nReturns the number of offspring in the next generation according to the Beverton-Holt model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.ReproductionRicker-Tuple{Int64, Float64, Float64, Union{Nothing, Float64}}","page":"Functions","title":"MetaRange.ReproductionRicker","text":"ReproductionRicker(N::Int64, growrate::Float64, carry::Float64, unused::Union{Float64,Nothing})\n\nReturns the number of Individuals in the next generation according to the Ricker model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.ReproductionRickerAllee-Tuple{Int64, Float64, Float64, Union{Nothing, Float64}}","page":"Functions","title":"MetaRange.ReproductionRickerAllee","text":"ReproductionRickerAllee(N::Int64, growrate::Float64, carry::Float64, allee::Union{Float64,Nothing})\n\nReturns the number of Individuals in the next generation according to the Ricker model. Includes allee effects\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.Survive!-Tuple{Vector{MetaRange.Species}, Any, Int64}","page":"Functions","title":"MetaRange.Survive!","text":"Survive!(species::Vector{Species}, DispersalSurvival, t::Int64)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.abundance_gif-2","page":"Functions","title":"MetaRange.abundance_gif","text":"abundance_gif(SD::Simulation_Data, frames=2)\n\ncreates a gif for the abundance of a species in a landscape for all timesteps\n\n\n\n\n\n","category":"function"},{"location":"functions/#MetaRange.carry_gif","page":"Functions","title":"MetaRange.carry_gif","text":"carry_gif(SD::Simulation_Data, frames=2)\n\ncreates a gif for the carrying capacity of a landscape for all timesteps\n\n\n\n\n\n","category":"function"},{"location":"functions/#MetaRange.check_attribute_values!-Tuple{Array{Float64}, String}","page":"Functions","title":"MetaRange.check_attribute_values!","text":"check_attribute_values!(attribute::Array{Float64}, key::String)\n\nSanity checks for Attribute Matrices. Will convert Celsius values to Kelvin.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.check_environment_dir-Tuple{Dict{String, Any}}","page":"Functions","title":"MetaRange.check_environment_dir","text":"check_environment_dir(config::Simulation_Parameters)\n\nChecks if the environment directory exists and throws an error if it doesn't.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.check_for_nan-Tuple{Array{Float64}}","page":"Functions","title":"MetaRange.check_for_nan","text":"check_for_nan(attribute::Array{Float64})\n\nChecks for NaNs in parameter matrix\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.check_species_dir-Tuple{Dict{String, Any}}","page":"Functions","title":"MetaRange.check_species_dir","text":"check_species_dir(config::Simulation_Parameters)\n\nChecks if the species directory exists and throws an error if it doesn't.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.default_run_data-Tuple{}","page":"Functions","title":"MetaRange.default_run_data","text":"default_run_data()\n\nInitializes a simple default run Simulation_Data struct.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.disperse_chunk!-Tuple{MetaRange.Species, Vector{CartesianIndex{2}}, Matrix{Float64}, MetaRange.Chunk, Int64}","page":"Functions","title":"MetaRange.disperse_chunk!","text":"disperse_chunk!(\nspecies::Species,\noccurrences::Vector{CartesianIndex{2}},\noffspring::Matrix{Float64},\nchunk::Chunk,\nt::Int64,\n\n)\n\nParallel Dispersal in a given chunk\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_Env_Preferences-Tuple{Dict, String}","page":"Functions","title":"MetaRange.get_Env_Preferences","text":"get_Env_Preferences(species::Dict, key::String)\n\nReturns the environmental preference for the supplied trait in key with limits and optimum as an Env_Preferences object.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_Simulation_Parameters-Tuple{Dict}","page":"Functions","title":"MetaRange.get_Simulation_Parameters","text":"get_Simulation_Parameters(config::Dict)\n\nReturns a Simulation_Parameters object constructed from the configuration Dictionary.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_Simulation_Variables-Tuple{}","page":"Functions","title":"MetaRange.get_Simulation_Variables","text":"get_Simulation_Variables()\n\nInitializes an empty Simulation_Variables object. Each parameter is defined with an empty matrix eqivalent to the landscape's size.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_Traits-Tuple{Dict}","page":"Functions","title":"MetaRange.get_Traits","text":"get_Traits(species::Dict)\n\nExtracts species traits from the configuration dictionary and returns a Trait object.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_biomass-NTuple{4, Any}","page":"Functions","title":"MetaRange.get_biomass","text":"get_biomass(mass, sd_mass, ysize, xsize)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_default_LS-Tuple{}","page":"Functions","title":"MetaRange.get_default_LS","text":"get_default_LS()\n\nCreates a Default Landscape with random values and some NAs for testing.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_default_simulation_parameters-Tuple{}","page":"Functions","title":"MetaRange.get_default_simulation_parameters","text":"get_default_simulation_parameters()\n\nReturns a Dictionary with default simulation parameters.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_default_species-Tuple{MetaRange.Landscape, MetaRange.Simulation_Parameters}","page":"Functions","title":"MetaRange.get_default_species","text":"get_default_species(LS::Landscape, SP::Simulation_Parameters)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_environment_dir-Tuple{Dict{String, Any}}","page":"Functions","title":"MetaRange.get_environment_dir","text":"get_environment_dir(config::Simulation_Parameters)\n\nReturns full path to environment folder or returns config_dir/environment when no path to the species folder is provided.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_habitat-Tuple{Dict{String, MetaRange.Env_Preferences}, MetaRange.Landscape, String, Int64}","page":"Functions","title":"MetaRange.get_habitat","text":"get_habitat(\nenv_pref::Dict{String, Env_Preferences},\nLS::Landscape,\nattribute_mode::String,\nt::Int\n\n)\n\nGet habitat in current timestep. Return Array{Float64, 2}\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_is_habitat-Tuple{Any, Any}","page":"Functions","title":"MetaRange.get_is_habitat","text":"get_is_habitat(habitat, habitat_cutoff_suitability)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_out_dir-Tuple{Dict{String, Any}}","page":"Functions","title":"MetaRange.get_out_dir","text":"get_out_dir(SP::Simulation_Parameters)\n\nNames a new output directory for the simulation used in init_out_dir()[@ref]. This directory will only be created if backup is true or the user later saves an output into the default paths\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_pop_bevmort-Tuple{MetaRange.Traits, MetaRange.Landscape, Matrix{Float64}, Union{Float64, Matrix{Float64}}, Bool, Int64, Float64}","page":"Functions","title":"MetaRange.get_pop_bevmort","text":"get_pop_bevmort(\ntraits::Traits,\nLS::Landscape,\nhabitat::Array{Float64,2},\nmass::Union{Float64,Array{Float64,2}},\nuse_metabolic_theory::Bool,\ntimestep::Int,\nE::Float64,\n\n)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_pop_carry-Tuple{MetaRange.Traits, MetaRange.Landscape, Matrix{Float64}, Matrix{Float64}, Bool, Int64, Float64}","page":"Functions","title":"MetaRange.get_pop_carry","text":"get_pop_carry(\ntraits::Traits,\nLS::Landscape,\nhabitat::Array{Float64,2},\nmass::Array{Float64,2},\nuse_metabolic_theory::Bool,\ntimestep::Int,\nE::Float64,\n\n)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_pop_var-Tuple{Float64, Float64, Float64, Union{Nothing, Float64}, MetaRange.Traits, MetaRange.Landscape, Matrix{Float64}, Bool, Int64, Float64}","page":"Functions","title":"MetaRange.get_pop_var","text":"get_pop_var(\ntrait::Float64,\nsd_trait::Float64,\nexp_trait::Float64,\nparam_const_trait::Union{Float64,Nothing},\ntraits::Traits,\nLS::Landscape,\nmass::Array{Float64,2},\nuse_metabolic_theory::Bool,\ntimestep::Int, E::Float64,\n\n)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_species_dir-Tuple{Dict{String, Any}}","page":"Functions","title":"MetaRange.get_species_dir","text":"get_species_dir(config::Simulation_Parameters)\n\nReturns full path to species folder or returns config_dir/species when no path to the species folder is provided.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_testrun_simulation_parameters-Tuple{}","page":"Functions","title":"MetaRange.get_testrun_simulation_parameters","text":"get_testrun_simulation_parameters()\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.image_abundances-Tuple{Simulation_Data, Int64}","page":"Functions","title":"MetaRange.image_abundances","text":"image_abundances(SD::Simulation_Data, t::Int)\n\nplots the species abundance in the landscape for a given timestep t\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.image_precipitation-Tuple{Simulation_Data, Int64}","page":"Functions","title":"MetaRange.image_precipitation","text":"image_precipitation(SD::Simulation_Data, t::Int)\n\nplots the precipitation of a landscape for a given timestep t\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.image_restrictions-Tuple{Simulation_Data, Int64}","page":"Functions","title":"MetaRange.image_restrictions","text":"image_restrictions(SD::Simulation_Data, t::Int)\n\nplots the restrictions of a landscape for a given timestep t\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.image_suitability-Tuple{Simulation_Data, Int64}","page":"Functions","title":"MetaRange.image_suitability","text":"image_suitability(SD::Simulation_Data, t::Int)\n\nplots the habitat suitability of a landscape for a given timestep t\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.image_temperature-Tuple{Simulation_Data, Int64}","page":"Functions","title":"MetaRange.image_temperature","text":"image_temperature(SD::Simulation_Data, t::Int)\n\nplots the temperature of a landscape for a given timestep t\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.init_out_dir-Tuple{MetaRange.Simulation_Parameters}","page":"Functions","title":"MetaRange.init_out_dir","text":"init_out_dir(SP::Simulation_Parameters)\n\nInitializes the output directory. This is called when input_backup in the configuration file is set to true and creates a backup of the input files in the output directory.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.init_species_sim_vars!-Tuple{Array{MetaRange.Species}, MetaRange.Landscape, MetaRange.Simulation_Parameters, Int64}","page":"Functions","title":"MetaRange.init_species_sim_vars!","text":"init_species_sim_vars!(\nspecies::Array{Species},\nLS::Landscape,\nparameters::Simulation_Parameters,\ntimestep::Int,\n\n)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.initialize_abundances-Tuple{MetaRange.Simulation_Parameters, Matrix{Float64}, Float64}","page":"Functions","title":"MetaRange.initialize_abundances","text":"initialize_abundances(\n    SP::Simulation_Parameters,\n    habitat::Array{Float64, 2},\n    carry::Float64)\n\nInitialization of Abundances.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.initialize_output-Tuple{MetaRange.Simulation_Parameters, MetaRange.Landscape, Array{Int64, 3}, Array{Float64, 3}}","page":"Functions","title":"MetaRange.initialize_output","text":"initialize_output(\nSP::Simulation_Parameters,\nLS::Landscape,\nabundances::Array{Int64,3},\nhabitat::Array{Float64,3},\n\n)\n\nInitializes the output struct. Calculation of the first timesteps is done outside the function.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.make_out_dir-Tuple{String}","page":"Functions","title":"MetaRange.make_out_dir","text":"make_out_dir(out_dir::String)\n\ncreate an output directory if it does not exist\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.mortality_gif","page":"Functions","title":"MetaRange.mortality_gif","text":"mortality_gif(SD::Simulation_Data, frames=2)\n\ncreates a gif for the mortality rate of a species in a landscape for all timesteps\n\n\n\n\n\n","category":"function"},{"location":"functions/#MetaRange.parse_environment_parameters!-Tuple{Dict, Dict}","page":"Functions","title":"MetaRange.parse_environment_parameters!","text":"parse_environment_parameters!(config::Dict, input_config::Dict)\n\nBuild the Dicts containing environment attribute and restriction files.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.parse_species_datatypes!-Tuple{Dict}","page":"Functions","title":"MetaRange.parse_species_datatypes!","text":"parse_species_datatypes!(species::Dict)\n\nConvert all Float and Integer arguments to their respective Julia types (as needed for the species)\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.plot_abundances-Tuple{Simulation_Data}","page":"Functions","title":"MetaRange.plot_abundances","text":"plot_abundances(SD::Simulation_Data)\n\nplots the total abundances of a species over time\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.randomize!-Tuple{Any, Any}","page":"Functions","title":"MetaRange.randomize!","text":"randomize!(value,sd)\n\nTakes a parameter or array of parameters and modifies it according to a lognormal distribution based on standard deviation sd\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.read_input-Tuple{String}","page":"Functions","title":"MetaRange.read_input","text":"read_input(path::String)\n\nReads in the configuration and associated files in the folder and returns a Simulation_Data struct.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.read_species_dir-Tuple{String, MetaRange.Landscape, MetaRange.Simulation_Parameters}","page":"Functions","title":"MetaRange.read_species_dir","text":"read_species_dir(species_dir::String, LS::Landscape, SP::Simulation_Parameters)\n\nRead species directory, calculate properties and parameters if not provided and return as a vector of Species objects.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.read_ts_config-Tuple{String, String}","page":"Functions","title":"MetaRange.read_ts_config","text":"read_ts_config(env_dir::String, ls_timeseries_config::String)\n\nReturns the timeseries generator configuration as a Dict (no struct as it's only used once)\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.reproduce!-Tuple{Vector{MetaRange.Species}, Any, Int64}","page":"Functions","title":"MetaRange.reproduce!","text":"reproduce(species, reproduction, timestep)\n\nReproduction function. Takes a vector of species structs, a reproduction function and a timestep and calculates the amount of species in the next timestep.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.reproduction_gif","page":"Functions","title":"MetaRange.reproduction_gif","text":"reproduction_gif(SD::Simulation_Data, frames=2)\n\ncreates a gif for the reproduction rate of a species in landscape for all timesteps\n\n\n\n\n\n","category":"function"},{"location":"functions/#MetaRange.run_simulation!-Tuple{Simulation_Data}","page":"Functions","title":"MetaRange.run_simulation!","text":"run_simulation!(SD::Simulation_Data)\n\nEcological Simulation\n\nMain simulation function. Load, initialize and execute all data & processes that are needed.\n\nArguments\n\nSD::MetaRange.Simulation_Data: MetaRange simulation data struct. Most likely produced by   read_input()\n\nReturns\n\nSD::MetaRange.Simulation_Data: Returns the struct with later timesteps after   initialisation simulated.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.save_all-Tuple{Simulation_Data}","page":"Functions","title":"MetaRange.save_all","text":"save_all(SD::Simulation_Data)\n\nsaves all output variables - reproduction, mortality rate, carrying capacity, habitat suitability, abundance - in a CSV file. The format is as follows: t, x, y, value, parameter\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.sp_sanity_checks!-Tuple{Dict}","page":"Functions","title":"MetaRange.sp_sanity_checks!","text":"sp_sanity_checks!(config::Dict)\n\nCheck if necessary configuration fields are missing\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.species_default-Tuple{}","page":"Functions","title":"MetaRange.species_default","text":"species_default()\n\nReturns a dictionary of default species\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.suitability_gif-2","page":"Functions","title":"MetaRange.suitability_gif","text":"suitability_gif(SD::Simulation_Data, frames=2)\n\ncreates a gif for the habitat suitability of a landscape for all timesteps\n\n\n\n\n\n","category":"function"},{"location":"functions/#MetaRange.write_config-Tuple{Simulation_Data, String}","page":"Functions","title":"MetaRange.write_config","text":"write_config(SD::Simulation_Data, backup_path::String)\n\nRecord the settings actually used for a simulation run and creates a config file that can be used for future replicate runs.\n\n\n\n\n\n","category":"method"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/#Installation","page":"Usage","title":"Installation","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Install the package by using the julia REPL and entering ] to enter the package manager. Then execute:  ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"pkg> add https://github.com/janablechschmidt/MetaRange.jl.git","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Alternatively use Pkg directly and enter:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Pkg\nPkg.add(url = \"https://github.com/janablechschmidt/MetaRange.jl.git\")","category":"page"},{"location":"usage/#Configuration","page":"Usage","title":"Configuration","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Configuration files for MetaRange are most conveniently supplied together in a folder. The folder should contain a configuration file and two sub-folders \"environment/\" and \"species/\". The configuration file can also define a path to environment or species files elsewhere.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"configuration/\n├── configuration.csv\n├── environment/\n│   ├── temperature.csv\n│   ├── precipitation.csv\n│   ├── parameter_1.csv\n│   └── ...\n└── species/\n    ├── species_1.csv\n    ├── species_2.csv\n    └── ...","category":"page"},{"location":"usage/#Configuration-File","page":"Usage","title":"Configuration File","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The configuration files are all formatted as space separated .csv files. This is the same minimal example as in examples/static/. More information on the configuration files can be found in the Parameters section.  ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Argument Value\nexperiment_name static\ntimesteps 50\ntemperature temperature.csv\nprecipitation precipitation.csv","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"# how are conflicts resolved if the same parameter is supplied in the configuration file and in the species file?","category":"page"},{"location":"usage/#Environment-Files","page":"Usage","title":"Environment Files","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Environment files are formatted as space separated .csv files. The model needs a temperature file to calculate metabolic rates. MetaRange works with either a single .csv that is used for the whole simulation or a folder with several .csv files to simulate a change in the environment. In this case the folder should contain one file for each timestep.","category":"page"},{"location":"usage/#Species-Files","page":"Usage","title":"Species Files","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Several species files can be supplied to the model at the same time. Here is the example species file from examples/static/. More information on the species configuration files can be found in the Parameters section.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Argument Value\nspecies_name example\nmass 1.0\nsd_mass 0.1\ngrowrate 1.5\nsd_growrate 0.1\nmax_dispersal_dist 3\nmax_dispersal_buffer 2\nmean_dispersal_dist 1\nallee -100.0\nsd_allee 0.1\nbevmort 0.2\nsd_bevmort 0.35\ncarry 1500.0\nsd_carry 50.0\nupper_limit_temperature 300.0\nlower_limit_temperature 285.0\noptimum_temperature 292.5\nresponse_temperature sqrt\nupper_limit_precipitation 1900\nlower_limit_precipitation 1100\noptimum_precipitation 1500\nresponse_precipitation sqrt\nhabitat_cutoff_suitability 0.01","category":"page"},{"location":"usage/#Running-the-simulation","page":"Usage","title":"Running the simulation","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"To run the simulation first load in your files as a Simulation_Data struct by using the read_input function. Then run the simulation by using the run_simulation!() function on the Simulation_Data object.  ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"SD = read_input(\"./examples/static/configuration.csv\")\nrun_simulation!(SD)","category":"page"},{"location":"usage/#Output","page":"Usage","title":"Output","text":"","category":"section"},{"location":"usage/#Visualization","page":"Usage","title":"Visualization","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"For a quick visualization there are a few functions implemented. These can be found in the Visualization Functions section. plot_abundances creates a line plot of the first species in the simulation over time. image_abundances creates a heatmap of the abundances at the specified time-step.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The function abundance_gif creates a gif of the abundance heatmap over time:  ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: Abundance plot in a static landscape.)  ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Other visualization functions are image_suitability, suitability_gif, image_temperature, image_precipitation and image_restrictions.","category":"page"},{"location":"usage/#Simulation-Data-Object","page":"Usage","title":"Simulation Data Object","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"To directly check the results and to do more detailed analyses directly inspect the Simulation_Data object. In julia this is done by looking at the fields with the period character .. So to see the final population size of the first species you would use:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"SD.species[1].abundances[:,:,end]","category":"page"},{"location":"#MetaRange","page":"Home","title":"MetaRange","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MetaRange","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for MetaRange.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Exported-Functions","page":"Home","title":"Exported Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"read_input\nrun_simulation!\ndefault_run_data","category":"page"},{"location":"#MetaRange.read_input","page":"Home","title":"MetaRange.read_input","text":"read_input(path::String)\n\nReads in the configuration and associated files in the folder and returns a Simulation_Data struct.\n\n\n\n\n\n","category":"function"},{"location":"#MetaRange.run_simulation!","page":"Home","title":"MetaRange.run_simulation!","text":"run_simulation!(SD::Simulation_Data)\n\nEcological Simulation\n\nMain simulation function. Load, initialize and execute all data & processes that are needed.\n\nArguments\n\nSD::MetaRange.Simulation_Data: MetaRange simulation data struct. Most likely produced by   read_input()\n\nReturns\n\nSD::MetaRange.Simulation_Data: Returns the struct with later timesteps after   initialisation simulated.\n\n\n\n\n\n","category":"function"},{"location":"#MetaRange.default_run_data","page":"Home","title":"MetaRange.default_run_data","text":"default_run_data()\n\nInitializes a simple default run Simulation_Data struct.\n\n\n\n\n\n","category":"function"},{"location":"parameters/#Parameters","page":"Parameters","title":"Parameters","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"These are all the parameters that are needed for a simulation. For the Simulation configuration files defaults are shown here but the environment and species parameters have no defaults and have to be supplied.  ","category":"page"},{"location":"parameters/#Simulation-configuration-files","page":"Parameters","title":"Simulation configuration files","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"Parameter Default Type Description\nexperiment_name default String Name of the experiment.\nconfig_dir `` String Path to the configuration folder is taken from read_input by removing the file name\noutput_dir ./output/ String Path to the output folder.\nspecies_dir ./species/ String Path to the species folder relative from the configuration file. The default assumes a species folder in the same folder as the configuration file from read_input\nenvironment_dir ./environment/ String Path to the environment folder relative to the configuration file. The default assumes an environment folder in the same folder as the configuration file from read_input\ninput_backup false Bool If true the input files will be copied to the output folder.\nenv_attribute_files NO DEFAULT Dictionary{String, String} Path to the environment attribute files. The parameter is the key which points to the filepath of the respective file.\nenv_restriction_files NO DEFAULT Dictionary{String, String} Path to the environment restriction files. The parameter is the key which points to the filepath of the respective file. The Simulation can be done without restrictions.\nenv_attribute_mode minimum String Mode for the environment attributes. Can be TODO\nenv_restriction_mode minimum String Mode for the environment restrictions. Can be TODO\nattribute_restriction_blending multiplication String Mode for the environment restrictions. Can be TODO\ntimesteps 20 Int Number of timesteps to run the simulation for.\nrandomseed 42 Int Random seed for the simulation.\nreproduction_model Beverton String Sets which Reproduction model will be used in the simulation. Can be one of Beverton, Ricker or RickerAllee. See in TODO for more information\nuse_metabolic_theory true Bool If true the Metabolic Theory of Ecology(Brown et al., 2004)[1] will be applied in calculation of TODO\nuse_stoch_allee false Bool If true Allee effects will have a random component\nuse_stoch_carry false Bool If true the carrying capacity will have a random component\nuse_stoch_num false Bool If true the number of individuals will have a random component\ninitialize_cells habitat String Sets where the species will be initialized. Can be one of TODO","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"note: Note\nEnvironmental parameters have no predefined default name or value. They are supplied through the environment files and require the use of the same name in the species configuration files. Temperature is always required for the Metabolic Theory of Ecology. For a parameter p there should be a file p.csv in the environment folder.   For this case in the options it would be:p p.csvor if there is several files for p:  p p/","category":"page"},{"location":"parameters/#Species-configuration-files","page":"Parameters","title":"Species configuration files","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"warning: Warning\nSpecies configuration files have no defaults. All parameters have to be supplied in the file.","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"Parameter Type Description\nspecies_name String Name of the species.\nmass Float Mass of the individuals TODO:(is that right?).\nsd_mass Float Standard deviation of the mass of the individuals.\ngrowrate Float Growth rate of the individuals.\nsd_growrate Float Standard deviation of the growth rate of the individuals.\nparam_const_growrate Float TODO\nprob_dispersal Float Probability of the species to disperse. TODO not currently in use\nmax_dispersal_dist Int Maximum distance the species can disperse.\nmax_dispersal_buffer Int Buffer around the maximum distance the species can disperse. TODO needed?\nmean_dispersal_dist Int Mean distance the species can disperse.\nallee Float TODO\nsd_allee Float Standard deviation of the Allee effect.\nparam_const_allee Float TODO\nbevmort Float TODO\nsd_bevmort Float Standard deviation of the Beverton mortality.\nparam_const_bevmort Float TODO\ncarry Float Carrying capacity of the species.\nsd_carry Float Standard deviation of the carrying capacity.\nparam_const_carry Float TODO\nupper_limit_temperature Float Upper limit of the temperature range.\nlower_limit_temperature Float Lower limit of the temperature range.\noptimum_temperature Float Optimum temperature of the species.\nresponse_temperature String Response of the species to temperature. Can be one of linear, quadratic, sqrt or normal.\nhabitat_cutoff_suitability Float TODO","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"note: Note\nThe general pattern of response for to an environmental preference p is:  upper_limit_p: Upper limit of the parameter range.\nlower_limit_p: Lower limit of the parameter range.\noptimum_p: Optimum value of the parameter.\nresponse_p: Response of the species to the parameter. Can be one of linear, quadratic, sqrt or normal.","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"[1]: Brown, James H., et al. \"Toward a metabolic theory of ecology.\" Ecology 85.7 (2004): 1771-1789. https://doi.org/10.1890/03-9000","category":"page"},{"location":"newbies/#Instructions-for-Newbies","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"Welcome Newbies! This is a step-by-step guide for anyone who is new to Julia and/or modelling in general. We hope you find any information you need here.","category":"page"},{"location":"newbies/#Setting-up-Julia-on-your-PC","page":"Instructions for Newbies","title":"Setting up Julia on your PC","text":"","category":"section"},{"location":"newbies/#Downloading-Julia","page":"Instructions for Newbies","title":"Downloading Julia","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"First things first: Let's install Julia. Download the version that corresponds to your operating system and install it on your device.","category":"page"},{"location":"newbies/#Downloading-VSCode","page":"Instructions for Newbies","title":"Downloading VSCode","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"It is best to use a User Interface when applying MetaRange, though it is not required. We recommend using VSCode - if you have used RStudio before, you will find this very intuitive to use. If not, don't worry, it's less complicated than it looks. Download VSCode here and install it on your PC.","category":"page"},{"location":"newbies/#Connecting-the-two","page":"Instructions for Newbies","title":"Connecting the two","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"Now, we need to set VSCode up so it knows that you want to program in Julia language. To do so, open VSCode. In the top menu bar, select \"View\", then \"Extensions\". In the appearing search bar, type \"julia\". Select the Julia extension and hit the \"Install\" button. (If you have previously installed an older version of the Julia extension before, you might need to hit the \"Reload Required\" button.) Finally, restart VSCode. You have now connected Julia and VSCode! ","category":"page"},{"location":"newbies/#Defining-your-workspace","page":"Instructions for Newbies","title":"Defining your workspace","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"VSCode can be manually set up to run from within a folder. First, create the folder where you want your simulations to be, for example something like \"C:\\Users\\yourname\\Simulations\\\". Then, on the menu bar on the left in VSCode, click on the top symbol \"Explorer\". Click \"Open Folder\" and select the folder you created.","category":"page"},{"location":"newbies/#Setting-up-MetaRange","page":"Instructions for Newbies","title":"Setting up MetaRange","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"It's most intuitive to work with a script in VSCode. Create a new file by either selecting \"New File\" on the welcome page, or in the top menu bar, go to \"File -> New file\". In the top search bar, you will need to define which type of file you want. Select \"Julia File\". Now, we need to open a terminal. In the top menu bar, select \"Terminal\" and then \"New Terminal\". Then, press and hold Alt, and press \"j\" and then \"o\" while holding Alt. This will tell it \"Julia open\", so it starts up Julia in your terminal. This may take a few seconds. To the left of your coursor, it should now say \"julia>\". ","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"To set up MetaRange, type the following:","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"import Pkg; Pkg.add(url = \"https://github.com/janablechschmidt/MetaRange.jl.git\")","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"This will download MetaRange as a package and install it with all its necessary dependencies, so you don't have to worry about those. Installation may take a while. You'll know it's done when on the far left of your terminal, the word \"julia>\" appears on the bottom again.","category":"page"},{"location":"newbies/#Where-did-it-install","page":"Instructions for Newbies","title":"Where did it install","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"When installation is done, you'll need to locate the package on your PC. On windows, packages typically install inside the folder called \".julia\" (the dot indicates that this folder is hidden), which contains a folder called \"packages\". If you cannot find it, try searching for \"MetaRange\" in the search bar. Once you've located it, it is recommended to copy the folder \"examples\" from the MetaRange package to the place where you want to run your simulations. Typically, this should be the folder you created and opened in VSCode previously. To get the location of the MetaRange.jl install run","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"using MetaRange\npathof(MetaRange)","category":"page"},{"location":"newbies/#Using-MetaRange-Example-folder","page":"Instructions for Newbies","title":"Using MetaRange - Example folder","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"You'll see that there are two folders inside the examples folder. One contains a static environment, meaning environmental conditions stay the same throughout all timesteps. The other one contains some environmental change, so conditions will vary with each timestep. Let's take a look at the files in the \"static environment\" folder for now.","category":"page"},{"location":"newbies/#Configuration-file","page":"Instructions for Newbies","title":"Configuration file","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"The CSV file \"configuration.csv\" contains instructions for the model on the simulation settings. It has several optional parameters and four required ones: ","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"experimentname: the folder that contains all simulation inputs, in this case \"Experiment1Static_Environment\"\ntimesteps: number of timesteps to be simulated, in this case 50\ntemperature: where the model can find your temperature input. Can either be a CSV file or a folder containing multiple CSV files in alphabetical order\nprecipitation: where the model can find your precipitation input. Can either be a CSV file or a folder containing multiple CSV files in alphabetical order","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"For the optional parameters, refer to the parameters section of the documentation.","category":"page"},{"location":"newbies/#Environment-folder","page":"Instructions for Newbies","title":"Environment folder","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"This folder contains the environment that you want to model your species in. It can contain one CSV file for each environmental variable, which means the environment will stay the same for each timestep. Alternatively, it can contain folders with one CSV file for each timestep. These need to be named in a way that can be sorted by your PC - for example, you can name them \"Temp1.csv\", \"Temp2.csv\", etc. If you use one single CSV file, put its name in the corresponding row of the config file. If you are using multiple files, put the name of the folder that contains them. In our example, we are modelling \"Example1StaticEnvironment\" for 50 timesteps and provide precipitation.csv and temperature.csv.","category":"page"},{"location":"newbies/#Species-folder","page":"Instructions for Newbies","title":"Species folder","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"The species folder contains information on the species that you are modelling. It has to contain one CSV file per species.","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"note: Note\nMultiple species modelling is currently broken. You can only simulate one species at a time.","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"You'll need to supply parameters on your species' demographics, mass, environmental preferences, and dispersal abilities. Check out the species.csv to have a look at all required parameters and refer to the parameters section of the documentation for more info.","category":"page"},{"location":"newbies/#Running-the-simulation","page":"Instructions for Newbies","title":"Running the simulation","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"Let's try running the example on your machine. Use","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"using MetaRange","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"to tell your PC that you want to use functions from the MetaRange package.","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"Let's first check whether we are in the correct working directory. Type pwd() (print working directory) to see if we are indeed in the directory we created earlier. If not, change your working directory to that folder by typing","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"cd(\"C:\\\\Users\\\\yourname\\\\Simulations\")","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"Next up, we'll read the input files into the model to set up the simulation. Type","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"SD = read_input(\"./Example1_Static_Environment/configuration.csv\")","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"You are doing two things here. First, you are naming a variable called SD - short for Simulation Data - and assigning it the result of the readinput() function. Second, you are telling readinput() where it can find the simulation configurations: in a folder called \"Example2StaticEnvironment\" in a file called \"configuration.csv\". You are providing the function with a relative path, as indicated by the point in front the first slash. You could also give an absolute path name.","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"Finally, it is time for the simulation itself.","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"run_simulation!(SD)","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"You are now telling the model to run the simulation on your previously created variable \"SD\". The exclamation point behind the function name indicates that the variable you give it as an argument, SD, will be altered by the function.","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"You will see the simulation progress in your Julia REPL: the model prints each timestep and lets you know how much time has passed once the simulation is completed.","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"Running the other example, Example2EnvironmentalChange, works just the same way. Simply replace the name of the folder in the read_input() function.","category":"page"},{"location":"newbies/#Analysis","page":"Instructions for Newbies","title":"Analysis","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"The output of the simulation will be saved to the same SimulationData object SD we created before. You can access any trait or parameter in this struct. SD has four main properties: parameters (holds the simulation configurations), landscape (holds environmental matrices), species (hold the species-specific traits, their abundances and habitat suitability per timestep), and duration (which has the start and end time of your simulation).","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"If you want to check what you set as your output directory, you can access that parameter via","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"SD.parameters.output_dir","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"Or if you want to investigate the abundances of your species 1 at timestep 10, type","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"SD.species[1].abundances[:,:,10]","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"You can also use one of the plotting functions to have a look at your results, for example","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"image_abundances(SD, 10)","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"A function to save your output is curently being built. In the meantime, you can save your chosen outputs using the following code:","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"for i in 1:dim(SD.species[1].abundances,3)\n    writedlm(\"Abundances_$i.csv\", SD.species[1].abundances[:,:,i], ',')\nend","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"This code will write a CSV file for each timestep of your abundances and save them as \"Abundances1.csv\", \"Abundances2.csv\",... If you want to save other parameters, change the second argument in the writedlm() function and rename the file in the first argument. If you want to use anything other than in comma as your seperator in the CSV file, simply change the symbol in the third argument. If you want to save the files somewhere else, you can also provide a whole path in the first argument.","category":"page"},{"location":"newbies/#Using-MetaRange-Use-your-own-data","page":"Instructions for Newbies","title":"Using MetaRange - Use your own data","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"When you feel ready to apply the model to your own data, here's an example walkthrough on how to prepare your data so that the model can use it as input.","category":"page"},{"location":"newbies/#Environmental-data","page":"Instructions for Newbies","title":"Environmental data","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"Typically, you'll have your environmental data as some sort of TIFF or Raster file. For example, if you download your files from CHELSA, the files will be in TIFF format. You then need to extract the value for each grid cell and save the resulting array as a CSV file. If the TIFF has a higher resolution than what you want to model, you need to downscale it first.  You can do the data preparation in whatever language you feel most comfortable in - below you'll find an example for how to save the precipitation of Bavaria in R.","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"library(raster)\nprecipitation <- raster(\"yourpath/CHELSA_bio12_1981-2010_V.2.1.tif\")\n# this holds data for the whole world, so we reduce size to our area of interest, e.g. Bavaria\nGermany <- getData(\"GADM\", country=\"DE\",level=1)\nBavaria <- Germany[Germany@data$NAME_1 == \"Bayern\", ]\nprecipitation_bav <- crop(precipitation, extent(Bavaria))\n# now we reduce resolution\nprecipitation_bav_red <- aggregate(precipitation_bav, fact = 10)\n# now save as CSV in MetaRange format\nprecipitation_metarange <- round(as.matrix(precipitation_bav_red))\nprecipitation_metarange[which(is.na(precipitation_metarange))] <- \"NaN\"\n# Julia needs to have grid cells without values filled with \"NaN\"\nwrite.table(precipitation_metarange, \"Precipitation.csv\", col.names = F, row.names = F)","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"We've now prepared our Precipitation file for input. You can prepare your temperature data the same way. ","category":"page"},{"location":"newbies/#Species-data","page":"Instructions for Newbies","title":"Species data","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"Researching your species traits can be tedious. Check out which traits you need in the species section of the documentation. Here is a list of data bases that can be useful:","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"BIEN\nLEDA\nGBIF\nFloraWeb (in German)","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"For some traits, you can use estimates based on other traits: for example, to calculate the mass of a plant, the weight of the seed may be a good starting point.","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"Make sure to save your species traits in a CSV file in a space-separated \"Argument Value\" format.","category":"page"},{"location":"newbies/#Simulation-Configuration","page":"Instructions for Newbies","title":"Simulation Configuration","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"For a list of all possible configuration parameters please refer to the parameters section of the documentation. You don't need to provide every single argument here, these configurations have default values to fall back on. Again, your configurations need to be saved in a CSV file in a space-separated \"Argument Value\" format. In the configs, provide the paths to your species config file and your environment files.","category":"page"},{"location":"newbies/#Running-the-simulation-2","page":"Instructions for Newbies","title":"Running the simulation","text":"","category":"section"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"To run your simulation, two simple lines are enough:","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"SD = read_input(\"yourpath/configuration.csv\")\nrun_simulation!(SD)","category":"page"},{"location":"newbies/","page":"Instructions for Newbies","title":"Instructions for Newbies","text":"For how to access your output data for your analysis, refer to the Analysis section above.","category":"page"}]
}
