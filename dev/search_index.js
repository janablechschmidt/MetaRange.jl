var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/#Index","page":"Functions","title":"Index","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"functions/#Function-Descriptions","page":"Functions","title":"Function Descriptions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [MetaRange]","category":"page"},{"location":"functions/#MetaRange.Chunk","page":"Functions","title":"MetaRange.Chunk","text":"Chunk\n\nStruct for saving chunk coordinates\n\nFields\n\n-x::Int -y::Int\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Duration","page":"Functions","title":"MetaRange.Duration","text":"Duration\n\nStruct for saving the length of the runtime for the entire simulation.\n\nFields\n\n-start_time::DateTime: time when simulation was started -end_time::DateTime: time when simulation has finished\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Env_Preferences","page":"Functions","title":"MetaRange.Env_Preferences","text":"Env_Preferences\n\nStruct for saving the environmental preferences of a species.\n\nFields\n\nupper_limit::Float64: species parameter\nlower_limit::Float64: species parameter\noptimum::Float64: species parameter\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Landscape","page":"Functions","title":"MetaRange.Landscape","text":"Landscape\n\nStruct representing the landscape/environment.\n\nFields\n\n-xlength::Int64: equivalent to size[2] of any Array in this struct -ylength::Int64: equivalent to size[1] of any Array in this struct -environment::Dict{String, Array{Float64, 3}}: contains all environment attributes, addressable by name -restrictions::Array{Float64, 3}: #TODO\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Simulation_Data","page":"Functions","title":"MetaRange.Simulation_Data","text":"Simulation_Data\n\nStruct for saving all data related to the simulation\n\nFields\n\nparameters::Simulation_Parameters: simulation parameters of the experiment\nlandscape::Landscape: landscape of the experiment\nspecies::Vector{Species}: a vector of all the species in the experiment\nduration::Duration: saves the duration the experiment took to compute\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Simulation_Parameters","page":"Functions","title":"MetaRange.Simulation_Parameters","text":"Simulation_Parameters\n\nStruct for saving simulation parameters.\n\nFields\n\n-experiment_name::String: name of the experiment -config_dir::String: path to the folder containing the configfile -`outputdir::String: path to the folder where the output should be saved -speciesdir::String: path to the folder containing the species definitions -environmentdir::String: path to the folder or file containing the environment tables -inputbackup::Bool: if true, the input files will be copied to the output folder -envattributefiles::Dict{String, String}: #TODO -envrestrictionfiles::Dict{String, String}: #TODO -envattributemode::String: #TODO -envrestrictionmode::String: #TODO -attributerestrictionblending::String: #TODO -timesteps::Int64: number of timesteps in the simulation -randomseed::Int64: seed for number gneratror used in the simulation -reproductionmodel::String: #TODO -usemetabolictheory::Bool: #TODO -usestochallee::Bool: if true the allee effect will be stochastic -usestochcarry::Bool: if true the carrying capacity will be stochastic -usestochnum::Bool: #TODO Stochastic Survival see R code -initialize_cells::String`: #TODO\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Simulation_Variables","page":"Functions","title":"MetaRange.Simulation_Variables","text":"Simulation_Variables\n\nSimulation variables used for a species during run_simulation!\"\n\nFields\n\n-habitat::Array{Float64, 2}: habitability of landscape cells for a species at current simulation timestep -is_habitat::BitArray{2}: if landscape cells are habitable for a species at current simulation timestep -future_habitat::Array{Float64}: TODO -future_is_habitat::BitArray{2}: if landscape cells are habitable for a species at next simulation timestep -biomass::Array{Float64, 2}: biomass of a species individual at landscape cells -growrate::Array{Float64, 2}: growrate of species at landscape cells -carry::Array{Float64, 2}: carry property of species at landscape cells -allee::Array{Float64, 2}: allee property of species at landscape cells -bevmort::Array{Float64, 2}: Beverton mortaility of species at landscape cells -occurrences::Vector{CartesianIndex{2}}: list of cells where species occurs at current timestep -offspring::Array{Float64, 2}: offspring of species at current timestep\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Species","page":"Functions","title":"MetaRange.Species","text":"Species\n\nSaving all data related to a species.\n\nFields\n\n-species_name::String: name of the species -traits::Traits: a (Traits)[@ref] struct for the species -abundances::Array{Union{Int64, Missing}, 3}: amount of individuals of this species in each timestep -habitat::Array{Float64, 3}: habitat suitability in each timestep -dispersal_kernel::Matrix{Float64}:#TODO -vars::Simulation_Variables:#TODO\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.Traits","page":"Functions","title":"MetaRange.Traits","text":"Traits\n\nTraits of a species.\n\n#TODO: Add description in fields\n\nFields\n\nmass::Float64:\nsd_mass::Float64:\ngrowrate::Float64:\nsd_growrate::Float64:\nparam_const_growrate::Union{Float64, Nothing}:\nmax_dispersal_dist::Int64:\nmax_dispersal_buffer::Int64:\nmean_dispersal_dist::Int64:\nallee::Float64: Allee effect counteracting negative diversity loss in small populations\nsd_allee::Float64: Allee effect standard deviation\nparam_const_allee::Union{Float64, Nothing}:\nbevmort::Float64:\nsd_bevmort::Float64:\nparam_const_bevmort::Union{Float64, Nothing}:\ncarry::Float64:\nsd_carry::Float64:\nparam_const_carry::Union{Float64, Nothing}:\nenv_preferences::Dict{String, Env_Preferences}:\nhabitat_cutoff_suitability::Float64:\n\n\n\n\n\n","category":"type"},{"location":"functions/#MetaRange.BV-Tuple{Int64, Float64, Float64, Float64}","page":"Functions","title":"MetaRange.BV","text":"BV(N::Int64, growrate::Float64, carry::Float64, mortality::Float64)\n\nReturns the number of individuals in the next generation according to the Beverton-Holt model. Includes stochastic mortality.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.BVNoStoch-Tuple{Int64, Float64, Float64, Float64}","page":"Functions","title":"MetaRange.BVNoStoch","text":"BVNoStoch(N::Int64, growrate::Float64, carry::Float64, mortality::Float64)\n\nReturns the number of individuals in the next generation according to the Beverton-Holt model. Does not include stochastic mortality.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.DispersalNegExpFunction-Tuple{Any, Any}","page":"Functions","title":"MetaRange.DispersalNegExpFunction","text":"DispersalNegExpFunction(alpha, r)\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.DispersalNegExpKernel-Tuple{Any, Any}","page":"Functions","title":"MetaRange.DispersalNegExpKernel","text":"DispersalNegExpKernel(Dispersalbuffer, mean_dispersal_dist)\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.DispersalSurvivalRound-Tuple{Matrix{Union{Missing, Int64}}, Matrix{Float64}, Matrix{Int64}, Int64}","page":"Functions","title":"MetaRange.DispersalSurvivalRound","text":"DispersalSurvivalRound(\nAbundances::Array{Union{Missing, Int64},2},\nOffspring::Array{Float64,2}, xy::Array{Int64,2},\nmax_dispersal_dist::Int64\n)\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.DispersalSurvivalStoch-Tuple{Matrix{Union{Missing, Int64}}, Matrix{Float64}, Matrix{Int64}, Int64}","page":"Functions","title":"MetaRange.DispersalSurvivalStoch","text":"DispersalSurvivalStoch(\nAbundances::Array{Union{Missing, Int64},2},\nOffspring::Array{Float64,2},xy::Array{Int64,2},\nmax_dispersal_dist::Int64\n)\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.Disperse!-Tuple{Vector{MetaRange.Species}, MetaRange.Landscape, NTuple{4, Vector{MetaRange.Chunk}}, Int64}","page":"Functions","title":"MetaRange.Disperse!","text":"Disperse!(\nspecies::Vector{Species},\nLS::Landscape,\ngroups::NTuple{4, Vector{Chunk}},\ntimestep::Int64,\n\n)\n\nDispersal\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.GetDisjunctChunkGroups-Tuple{Int64, Tuple{Int64, Int64, Int64}}","page":"Functions","title":"MetaRange.GetDisjunctChunkGroups","text":"GetDisjunctChunkGroups(\nmax_dispersal_buffer::Int64,\nsize::Tuple{Int64, Int64, Int64},\n\n)\n\nCalculate the distinct chunk groups\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.GetDispersalSurvival-Tuple{Bool}","page":"Functions","title":"MetaRange.GetDispersalSurvival","text":"GetDispersalSurvival(use_stoch_Num::Bool)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.GetReproductionModel-Tuple{String}","page":"Functions","title":"MetaRange.GetReproductionModel","text":"GetReproductionModel(reproduction_model::String)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.HabitatMortality-Tuple{Matrix{Union{Missing, Int64}}, BitMatrix}","page":"Functions","title":"MetaRange.HabitatMortality","text":"HabitatMortality(Abundances, Is_habitat)\n\nHabitat based mortality\n\nThis function kills individuals that are in non suitable Habitat in code{Run}\n\nAbundances: array with the number of individuals in the landscape Is_habitat: array with boolean values that indicate which cell is habitat in the next timestep\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.InitializeAbundances-Tuple{MetaRange.Simulation_Parameters, Matrix{Float64}, Float64}","page":"Functions","title":"MetaRange.InitializeAbundances","text":"InitializeAbundances(\n    SP::Simulation_Parameters,\n    habitat::Array{Float64, 2},\n    carry::Float64)\n\nInitialization of Abundances.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.KernelDispersal!-Tuple{Int64, Matrix{Float64}, Matrix{Float64}}","page":"Functions","title":"MetaRange.KernelDispersal!","text":"KernelDispersal!(N::Int64, Offspring::Array{Float64,2}, Dispersal_kernel::Array{Float64,2})\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.MortalityBev-Tuple{Int64, Float64}","page":"Functions","title":"MetaRange.MortalityBev","text":"MortalityBev(N::Int64, mortality::Float64)\n\nReturns how many Individuals die. Includes Stochasticity\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.MortalityBevNoStoch-Tuple{Int64, Float64}","page":"Functions","title":"MetaRange.MortalityBevNoStoch","text":"MortalityBevNoStoch(N::Int64, mortality::Float64)\n\nReturns how many Individuals die. No Stochasticity\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.ReproductionBeverton-Tuple{Int64, Float64, Float64, Float64}","page":"Functions","title":"MetaRange.ReproductionBeverton","text":"ReproductionBeverton(N::Int64, growrate::Float64, carry::Float64, mortality::Float64)\n\nReturns the number of offspring in the next generation according to the Beverton-Holt model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.ReproductionRicker-Tuple{Int64, Float64, Float64, Union{Nothing, Float64}}","page":"Functions","title":"MetaRange.ReproductionRicker","text":"ReproductionRicker(N::Int64, growrate::Float64, carry::Float64, unused::Union{Float64,Nothing})\n\nReturns the number of Individuals in the next generation according to the Ricker model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.ReproductionRickerAllee-Tuple{Int64, Float64, Float64, Union{Nothing, Float64}}","page":"Functions","title":"MetaRange.ReproductionRickerAllee","text":"ReproductionRickerAllee(N::Int64, growrate::Float64, carry::Float64, allee::Union{Float64,Nothing})\n\nReturns the number of Individuals in the next generation according to the Ricker model. Includes allee effects\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.Survive!-Tuple{Vector{MetaRange.Species}, Any, Int64}","page":"Functions","title":"MetaRange.Survive!","text":"Survive!(species::Vector{Species}, DispersalSurvival, t::Int64)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.check_attribute_values!-Tuple{Array{Float64}, String}","page":"Functions","title":"MetaRange.check_attribute_values!","text":"check_attribute_values!(attribute::Array{Float64}, key::String)\n\nSanity checks for Attribute Matrices. Will convert Celsius values to Kelvin.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.check_environmentdir!-Tuple{Dict, String}","page":"Functions","title":"MetaRange.check_environmentdir!","text":"check_environmentdir!(config::Dict, config_path::String)\n\nCheck if environment directory was given and apply default path if not.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.check_for_nan-Tuple{Array{Float64}}","page":"Functions","title":"MetaRange.check_for_nan","text":"check_for_nan(attribute::Array{Float64})\n\nChecks for NaNs in parameter matrix\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.check_speciesdir!-Tuple{Dict, String}","page":"Functions","title":"MetaRange.check_speciesdir!","text":"check_speciesdir!(config::Dict, config_path::String)\n\nCheck if species directory was given and apply default path if not\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.default_run_data-Tuple{}","page":"Functions","title":"MetaRange.default_run_data","text":"default_run_data()\n\nInitializes a simple default run Simulation_Data struct.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.disperse_chunk!-Tuple{MetaRange.Species, Vector{CartesianIndex{2}}, Matrix{Float64}, MetaRange.Chunk, Int64}","page":"Functions","title":"MetaRange.disperse_chunk!","text":"disperse_chunk!(\nspecies::Species,\noccurrences::Vector{CartesianIndex{2}},\noffspring::Matrix{Float64},\nchunk::Chunk,\nt::Int64,\n\n)\n\nParallel Dispersal in a given chunk\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_Env_Preferences-Tuple{Dict, String}","page":"Functions","title":"MetaRange.get_Env_Preferences","text":"get_Env_Preferences(species::Dict, key::String)\n\nReturns the environmental preference for the supplied trait in \"key\" with limits and optimum as an Env_Preferences object.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_Simulation_Parameters-Tuple{Dict}","page":"Functions","title":"MetaRange.get_Simulation_Parameters","text":"get_Simulation_Parameters(config::Dict)\n\nReturns a Simulation_Parameters object constructed from the configuration Dictionary.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_Simulation_Variables-Tuple{}","page":"Functions","title":"MetaRange.get_Simulation_Variables","text":"get_Simulation_Variables()\n\nInitializes an empty Simulation_Variables object. Each parameter is defined with an empty matrix eqivalent to the landscape's size.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_Traits-Tuple{Dict}","page":"Functions","title":"MetaRange.get_Traits","text":"get_Traits(species::Dict)\n\nExtracts species traits from the configuration dictionary and returns a Trait object.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_biomass-NTuple{4, Any}","page":"Functions","title":"MetaRange.get_biomass","text":"get_biomass(mass, sd_mass, ysize, xsize)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_default_LS-Tuple{}","page":"Functions","title":"MetaRange.get_default_LS","text":"get_default_LS()\n\nCreates a Default Landscape with random values and some NAs for testing.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_default_simulation_parameters-Tuple{}","page":"Functions","title":"MetaRange.get_default_simulation_parameters","text":"get_default_simulation_parameters()\n\nReturns a Dictionary with default simulation parameters.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_default_species-Tuple{MetaRange.Landscape, MetaRange.Simulation_Parameters}","page":"Functions","title":"MetaRange.get_default_species","text":"get_default_species(LS::Landscape, SP::Simulation_Parameters)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_habitat-Tuple{Dict{String, MetaRange.Env_Preferences}, MetaRange.Landscape, String, Int64}","page":"Functions","title":"MetaRange.get_habitat","text":"get_habitat(\nenv_pref::Dict{String, Env_Preferences},\nLS::Landscape,\nattribute_mode::String,\nt::Int\n\n)\n\nGet habitat in current timestep. Return Array{Float64, 2}\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_is_habitat-Tuple{Any, Any}","page":"Functions","title":"MetaRange.get_is_habitat","text":"get_is_habitat(habitat, habitat_cutoff_suitability)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_pop_bevmort-Tuple{MetaRange.Traits, MetaRange.Landscape, Matrix{Float64}, Union{Float64, Matrix{Float64}}, Bool, Int64, Float64}","page":"Functions","title":"MetaRange.get_pop_bevmort","text":"get_pop_bevmort(\ntraits::Traits,\nLS::Landscape,\nhabitat::Array{Float64,2},\nmass::Union{Float64,Array{Float64,2}},\nuse_metabolic_theory::Bool,\ntimestep::Int,\nE::Float64,\n\n)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_pop_carry-Tuple{MetaRange.Traits, MetaRange.Landscape, Matrix{Float64}, Matrix{Float64}, Bool, Int64, Float64}","page":"Functions","title":"MetaRange.get_pop_carry","text":"get_pop_carry(\ntraits::Traits,\nLS::Landscape,\nhabitat::Array{Float64,2},\nmass::Array{Float64,2},\nuse_metabolic_theory::Bool,\ntimestep::Int,\nE::Float64,\n\n)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_pop_var-Tuple{Float64, Float64, Float64, Union{Nothing, Float64}, MetaRange.Traits, MetaRange.Landscape, Matrix{Float64}, Bool, Int64, Float64}","page":"Functions","title":"MetaRange.get_pop_var","text":"get_pop_var(\ntrait::Float64,\nsd_trait::Float64,\nexp_trait::Float64,\nparam_const_trait::Union{Float64,Nothing},\ntraits::Traits,\nLS::Landscape,\nmass::Array{Float64,2},\nuse_metabolic_theory::Bool,\ntimestep::Int, E::Float64,\n\n)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.get_testrun_simulation_parameters-Tuple{}","page":"Functions","title":"MetaRange.get_testrun_simulation_parameters","text":"get_testrun_simulation_parameters()\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.init_species_sim_vars!-Tuple{Array{MetaRange.Species}, MetaRange.Landscape, MetaRange.Simulation_Parameters, Int64}","page":"Functions","title":"MetaRange.init_species_sim_vars!","text":"init_species_sim_vars!(\nspecies::Array{Species},\nLS::Landscape,\nparameters::Simulation_Parameters,\ntimestep::Int,\n\n)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.parse_environment_parameters!-Tuple{Dict, Dict}","page":"Functions","title":"MetaRange.parse_environment_parameters!","text":"parse_environment_parameters!(config::Dict, input_config::Dict)\n\nBuild the Dicts containing environment attribute and restriction files.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.parse_species_datatypes!-Tuple{Dict}","page":"Functions","title":"MetaRange.parse_species_datatypes!","text":"parse_species_datatypes!(species::Dict)\n\nConvert all Float and Integer arguments to their respective Julia types (as needed for the species)\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.randomize!-Tuple{Any, Any}","page":"Functions","title":"MetaRange.randomize!","text":"randomize!(value,sd)\n\nTakes a parameter or array of parameters and modifies it according to a lognormal distribution based on standard deviation sd\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.read_input-Tuple{String}","page":"Functions","title":"MetaRange.read_input","text":"read_input(path::String)\n\nReads in the .config and associated files in the folder and returns a Simulation_Data struct.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.read_species_dir-Tuple{String, MetaRange.Landscape, MetaRange.Simulation_Parameters}","page":"Functions","title":"MetaRange.read_species_dir","text":"read_species_dir(species_dir::String, LS::Landscape, SP::Simulation_Parameters)\n\nRead species directory, calculate properties and parameters if not provided and return as a vector of Species objects.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.read_ts_config-Tuple{String, String}","page":"Functions","title":"MetaRange.read_ts_config","text":"read_ts_config(env_dir::String, ls_timeseries_config::String)\n\nReturns the timeseries generator configuration as a Dict (no struct as it's only used once)\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.reproduce!-Tuple{Vector{MetaRange.Species}, Any, Int64}","page":"Functions","title":"MetaRange.reproduce!","text":"reproduce(species, reproduction, timestep)\n\nReproduction function. Takes a vector of species structs, a reproduction function and a timestep and calculates the amount of species in the next timestep.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.run_simulation!-Tuple{Simulation_Data}","page":"Functions","title":"MetaRange.run_simulation!","text":"run_simulation!(SD::Simulation_Data)\n\nEcological Simulation\n\nMain simulation function. Load, initialize and execute all data & processes that are needed.\n\nArguments\n\nSD::MetaRange.Simulation_Data: MetaRange simulation data struct. Most likely produced by   read_input()\n\nReturns\n\nSD::MetaRange.Simulation_Data: Returns the struct with later timesteps after   initialisation simulated.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.sp_sanity_checks!-Tuple{Dict}","page":"Functions","title":"MetaRange.sp_sanity_checks!","text":"sp_sanity_checks!(config::Dict)\n\nCheck if necessary configuration fields are missing\n\n\n\n\n\n","category":"method"},{"location":"functions/#MetaRange.species_default-Tuple{}","page":"Functions","title":"MetaRange.species_default","text":"species_default()\n\nReturns a dictionary of default species\n\n\n\n\n\n","category":"method"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/#Installation","page":"Usage","title":"Installation","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Install the package by using the julia REPL and entering ] to enter the package manager. Then execute:  ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"pkg> add https://github.com/janablechschmidt/MetaRange.jl.git","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Alternatively use Pkg directly and enter:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Pkg\nPkg.add(url = \"https://github.com/janablechschmidt/MetaRange.jl.git\")","category":"page"},{"location":"usage/#Configuration","page":"Usage","title":"Configuration","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Configuration files for MetaRange should be supplied together in a folder. The folder should contain a configuration.csv file and two sub-folders \"environment/\" and \"species/\". The configuration file defines the environment and species configuration files.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"configuration/\n├── configuration.csv\n├── environment/\n│   ├── temperature.csv\n│   ├── precipitation.csv\n│   ├── parameter_1.csv\n│   └── ...\n└── species/\n    ├── species_1.csv\n    ├── species_2.csv\n    └── ...","category":"page"},{"location":"usage/#Configuration-File","page":"Usage","title":"Configuration File","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The configuration files are all formatted as space separated .csv files. This is the same minimal example as in examples/static/. More information on the configuration files can be found in the parameters section.  ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Argument Value\nexperiment_name static\ntimesteps 50\ntemperature temperature.csv\nprecipitation precipitation.csv","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"# how are conflicts resolved if the same parameter is supplied in the configuration file and in the species file?","category":"page"},{"location":"usage/#Environment-Files","page":"Usage","title":"Environment Files","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Environment files are formatted as space separated .csv files. The model needs a temperature file to calculate metabolic rates. MetaRange works with either a single .csv that is used for the whole simulation or a folder with several .csv files to simulate a change in the environment.  ","category":"page"},{"location":"usage/#Species-Files","page":"Usage","title":"Species Files","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Several species files can be supplied to the model at the same time. Here is the example species file from examples/static/. More information on the species configuration files can be found in the parameters section.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Argument Value\nspecies_name example\nmass 1.0\nsd_mass 0.1\ngrowrate 1.5\nsd_growrate 0.1\nmax_dispersal_dist 3\nmax_dispersal_buffer 2\nmean_dispersal_dist 1\nallee -100.0\nsd_allee 0.1\nbevmort 0.2\nsd_bevmort 0.35\ncarry 1500.0\nsd_carry 50.0\nupper_limit_temperature 300.0\nlower_limit_temperature 285.0\noptimum_temperature 292.5\nresponse_temperature sqrt\nupper_limit_precipitation 1900\nlower_limit_precipitation 1100\noptimum_precipitation 1500\nresponse_precipitation sqrt\nhabitat_cutoff_suitability 0.01","category":"page"},{"location":"usage/#Running-the-simulation","page":"Usage","title":"Running the simulation","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"To run the simulation first load in your files as a Simulation_Data struct by using the read_input function. Then run the simulation by using the run_simulation!() function on the Simulation_Data object.  ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"SD = read_configs(\"./examples/static/\")\nrun_simulation!(SD)","category":"page"},{"location":"usage/#Output","page":"Usage","title":"Output","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Using the Simulation_Data object you can inspect the results. In julia this is done by looking at the fields with a .. So to see the final population size of the first species you would use:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"SD.species[1].abundances[:,:,end]","category":"page"},{"location":"#MetaRange","page":"Home","title":"MetaRange","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MetaRange","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for MetaRange.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Exported-Functions","page":"Home","title":"Exported Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"read_input\nrun_simulation!\nSimulation_Data\ndefault_run_data","category":"page"},{"location":"#MetaRange.read_input","page":"Home","title":"MetaRange.read_input","text":"read_input(path::String)\n\nReads in the .config and associated files in the folder and returns a Simulation_Data struct.\n\n\n\n\n\n","category":"function"},{"location":"#MetaRange.run_simulation!","page":"Home","title":"MetaRange.run_simulation!","text":"run_simulation!(SD::Simulation_Data)\n\nEcological Simulation\n\nMain simulation function. Load, initialize and execute all data & processes that are needed.\n\nArguments\n\nSD::MetaRange.Simulation_Data: MetaRange simulation data struct. Most likely produced by   read_input()\n\nReturns\n\nSD::MetaRange.Simulation_Data: Returns the struct with later timesteps after   initialisation simulated.\n\n\n\n\n\n","category":"function"},{"location":"#MetaRange.default_run_data","page":"Home","title":"MetaRange.default_run_data","text":"default_run_data()\n\nInitializes a simple default run Simulation_Data struct.\n\n\n\n\n\n","category":"function"},{"location":"parameters/#Parameters","page":"Parameters","title":"Parameters","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"These are all the parameters that are needed for a simulation. For the Simulation configuration files defaults are shown here but the environemt and species parameters have no defaults and have to be supplied.  ","category":"page"},{"location":"parameters/#Simulation-configuration-files","page":"Parameters","title":"Simulation configuration files","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"Parameter Default Type Description\nexperiment_name default String Name of the experiment.\nconfig_dir `` String Path to the configuration folder is taken from read_input\noutput_dir ./output/ String Path to the output folder.\nspecies_dir .../species/ String Path to the species folder. The default assumes a species folder in the folder given to read_input\nenvironment_dir .../environment/ String Path to the environment folder. Default extends the path given in read_input\ninput_backup false Bool If true the input files will be copied to the output folder.\nenv_attribute_files NO DEFAULT Dictionary{String, String} Path to the environment attribute files. The parameter is the key which points to the filepath of the respective file.\nenv_restriction_files NO DEFAULT Dictionary{String, String} Path to the environment restriction files. The parameter is the key which points to the filepath of the respective file. The Simulation can be done without restrictions.\nenv_attribute_mode minimum String Mode for the environment attributes. Can be TODO\nenv_restriction_mode minimum String Mode for the environment restrictions. Can be TODO\nattribute_restriction_blending multiplication String Mode for the environment restrictions. Can be TODO\ntimesteps 20 Int Number of timesteps to run the simulation for.\nrandomseed 42 Int Random seed for the simulation.\nreproduction_model Beverton String Sets which Reproduction model will be used in the simulation. Can be one of Beverton, Ricker or RickerAllee. See in TODO for more information\nuse_metabolic_theory true Bool If true the Metabolic Theory of Ecology(Brown et al., 2004)[1] will be applied in calculation of TODO\nuse_stoch_allee false Bool If true Allee effects will have a random component\nuse_stoch_carry false Bool If true the carrying capacity will have a random component\nuse_stoch_num false Bool If true the number of individuals will have a random component\ninitialize_cells habitat String Sets where the species will be initialized. Can be one of TODO","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"note: Note\nEnvironmental parameters have no predefined default name or value. They are supplied through the environment files and require the use of the same name in the species configuration files. Temperature is always required for the Metabolic Theory of Ecology. For a parameter p there should be a file p.csv in the environment folder.   For this case in the options it would be:p p.csvor if there is several files for p:  p p/","category":"page"},{"location":"parameters/#Species-configuration-files","page":"Parameters","title":"Species configuration files","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"warning: Warning\nSpecies configuration files have no defaults. All parameters have to be supplied in the file.","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"Parameter Type Description\nspecies_name String Name of the species.\nmass Float Mass of the individuals TODO:(is that right?).\nsd_mass Float Standard deviation of the mass of the individuals.\ngrowrate Float Growth rate of the individuals.\nsd_growrate Float Standard deviation of the growth rate of the individuals.\nparam_const_growrate Float TODO\nprob_dispersal Float Probability of the species to disperse. TODO not currently in use\nmax_dispersal_dist Int Maximum distance the species can disperse.\nmax_dispersal_buffer Int Buffer around the maximum distance the species can disperse. TODO needed?\nmean_dispersal_dist Int Mean distance the species can disperse.\nallee Float TODO\nsd_allee Float Standard deviation of the Allee effect.\nparam_const_allee Float TODO\nbevmort Float TODO\nsd_bevmort Float Standard deviation of the Beverton mortality.\nparam_const_bevmort Float TODO\ncarry Float Carrying capacity of the species.\nsd_carry Float Standard deviation of the carrying capacity.\nparam_const_carry Float TODO\nupper_limit_temperature Float Upper limit of the temperature range.\nlower_limit_temperature Float Lower limit of the temperature range.\noptimum_temperature Float Optimum temperature of the species.\nresponse_temperature String Response of the species to temperature. Can be one of linear, quadratic, sqrt or normal.\nhabitat_cutoff_suitability Float TODO","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"note: Note\nThe general pattern of response for to an environmental preference p is:  upper_limit_p: Upper limit of the parameter range.\nlower_limit_p: Lower limit of the parameter range.\noptimum_p: Optimum value of the parameter.\nresponse_p: Response of the species to the parameter. Can be one of linear, quadratic, sqrt or normal.","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"[1]: Brown, James H., et al. \"Toward a metabolic theory of ecology.\" Ecology 85.7 (2004): 1771-1789. https://doi.org/10.1890/03-9000","category":"page"}]
}
